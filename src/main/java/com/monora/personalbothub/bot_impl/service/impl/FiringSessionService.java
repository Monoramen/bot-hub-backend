package com.monora.personalbothub.bot_impl.service.impl;
import com.monora.personalbothub.bot_api.dto.response.*;
import com.monora.personalbothub.bot_api.exception.ApiErrorType;
import com.monora.personalbothub.bot_api.exception.ApiException;
import com.monora.personalbothub.bot_db.entity.modbus.FiringProgramHistoryEntity;
import com.monora.personalbothub.bot_db.entity.modbus.FiringSessionEntity;
import com.monora.personalbothub.bot_db.entity.modbus.TemperatureEntity;
import com.monora.personalbothub.bot_db.repository.FiringProgramHistoryRepository;
import com.monora.personalbothub.bot_db.repository.FiringSessionRepository;
import com.monora.personalbothub.bot_impl.mapper.FiringProgramMapper;
import com.monora.personalbothub.bot_impl.mapper.FiringSessionMapper;
import com.monora.personalbothub.bot_impl.service.FiringProgramService;
import com.monora.personalbothub.bot_impl.service.TechProgramReadParameterService;
import com.monora.personalbothub.bot_impl.service.TechProgramWriteParameterService;
import com.monora.personalbothub.bot_impl.util.modbus.enums.FiringStatus;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;

@Service
@RequiredArgsConstructor
@Slf4j
public class FiringSessionService {

    private final FiringSessionRepository firingSessionRepository;
    private final FiringProgramHistoryRepository firingProgramHistoryRepository;
    private final TechProgramReadParameterService readParameterService;
    private final FiringProgramService firingProgramService;
    private final FiringSessionMapper firingSessionMapper;
    private final FiringProgramMapper firingProgramMapper;
    private final TemperatureService temperatureService;
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π —Å–µ–∞–Ω—Å –æ–±–∂–∏–≥–∞.
     * @param programNumber –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±–∂–∏–≥–∞, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è.
     * @return –°–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç FiringSessionEntity.
     */
    @Transactional
    public FiringProgramResponseDTO createNewSession(int programNumber, int unitId) throws ExecutionException, InterruptedException {
        FiringProgramResponseDTO programFromDevice = firingProgramService.getOneTechProgramParametersAsFiringProgramDTO(programNumber, unitId);

        FiringProgramHistoryEntity entity = firingProgramMapper.toEntityHistory(programFromDevice);

        firingProgramHistoryRepository.save(entity);

        CompletableFuture<FiringStatus> future = readParameterService.readStatusDevice(unitId);
        FiringStatus status = future.get();

        FiringSessionEntity session = new FiringSessionEntity();
        session.setProgram(entity);
        session.setStartTime(LocalDateTime.now());
        session.setStatus(status);
        log.info("Starting new firing session for program: {}", programNumber);
        firingSessionRepository.save(session);
        firingSessionRepository.save(session);
        return firingProgramMapper.toResponseHistoryDTO(entity);
    }


    @Transactional
    public FiringProgramResponseDTO startSession(Long sessionId) throws ExecutionException, InterruptedException {
        FiringSessionEntity session = firingSessionRepository.findById(sessionId)
                .orElseThrow(() -> new ApiException(ApiErrorType.NOT_FOUND, "Firing program not found"));
        CompletableFuture<FiringStatus> future = readParameterService.readStatusDevice(16);
        FiringStatus status = future.get();
        session.setStatus(status);
        return firingSessionMapper.toDto(session).program();
    }


    @Transactional
    public Optional<FiringSessionEntity> endSession(Long sessionId, FiringStatus status) {

        return firingSessionRepository.findById(sessionId)
                .map(session -> {
                    session.setEndTime(LocalDateTime.now());
                    session.setStatus(status); // –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, COMPLETED, FAILED –∏ —Ç.–¥.)

                    long duration = ChronoUnit.MINUTES.between(session.getStartTime(), session.getEndTime());
                    session.setActualDurationMinutes((int) duration);

                    log.info("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ {} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {}. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {} –º–∏–Ω", sessionId, status, duration);
                    return firingSessionRepository.save(session);
                });
    }



    @Scheduled(fixedRate = 60 * 1000) // –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    @Transactional
    public void monitorRunningSessions() {
        log.debug("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º RUNNING...");

        List<FiringSessionEntity> runningSessions = firingSessionRepository.findByStatus(FiringStatus.RUNNING);

        if (runningSessions.isEmpty()) {
            log.debug("–ù–µ—Ç —Å–µ—Å—Å–∏–π –≤ —Å—Ç–∞—Ç—É—Å–µ RUNNING –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.");
            return;
        }
        int unitId = 16; // –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥ –∏–ª–∏ —Ö—Ä–∞–Ω–∏—Ç—å –≤ —Å–µ—Å—Å–∏–∏

        for (FiringSessionEntity session : runningSessions) {
            try {
                // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –£–°–¢–†–û–ô–°–¢–í–ê
                CompletableFuture<FiringStatus> future = readParameterService.readStatusDevice(unitId);
                FiringStatus deviceStatus = future.get();

                if (FiringStatus.RUNNING.equals(deviceStatus)) {
                    // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—Å—ë –µ—â—ë –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
                    recordTemperatureForSession(session, unitId);
                } else {
                    // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã—à–ª–æ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
                    endSession(session.getId(), deviceStatus);
                    log.info("‚úÖ –°–µ—Å—Å–∏—è {} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {}", session.getId(), deviceStatus);
                }
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Å–µ—Å—Å–∏–∏ {}: {}", session.getId(), e.getMessage(), e);
            }
        }
    }

    @Transactional(readOnly = true)
    public Optional<FiringSessionEntity> getCurrentRunningSession() {
        return firingSessionRepository.findFirstByStatusOrderByStartTimeDesc(FiringStatus.RUNNING);
    }


    @Transactional(readOnly = true)
    public List<FiringSessionResponseDTO> getRecentSessions(int limit) {
        List<FiringSessionEntity> entities = (List<FiringSessionEntity>) firingSessionRepository.findTopNByOrderByStartTimeDesc(limit);
        return entities.stream()
                .map(firingSessionMapper::toListItemDto)
                .toList();
    }

    @Transactional(readOnly = true)
    public FiringSessionResponseDTO getSessionById(Long sessionId) {
        FiringSessionEntity entity = firingSessionRepository.findById(sessionId).orElseThrow(
                () -> new ApiException(ApiErrorType.NOT_FOUND, "Firing session not found")
        );
        return firingSessionMapper.toDto(entity);
    }


    private void recordTemperatureForSession(FiringSessionEntity session, int unitId)
            throws ExecutionException, InterruptedException {

        CompletableFuture<Float> future = temperatureService.readCurrentDeviceTemp(unitId);
        Float temperatureValue = future.get();

        if (temperatureValue == null) {
            log.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è —Å–µ—Å—Å–∏–∏ {}", session.getId());
            return;
        }

        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –ø–æ–∫–∞–∑–∞–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        TemperatureEntity tempReading = new TemperatureEntity();
        tempReading.setTemperature(temperatureValue);
        tempReading.setTimestamp(LocalDateTime.now().withSecond(0).withNano(0));
        tempReading.setSession(session);

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ —Å–µ—Å—Å–∏–∏
        if (session.getMaxRecordedTemperature() == null || temperatureValue > session.getMaxRecordedTemperature()) {
            session.setMaxRecordedTemperature((double) temperatureValue);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
        session.getTemperatureReadings().add(tempReading);
        firingSessionRepository.save(session);

        log.debug("üå°Ô∏è –ó–∞–ø–∏—Å–∞–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {}¬∞C –¥–ª—è —Å–µ—Å—Å–∏–∏ {}", temperatureValue, session.getId());
    }


    // –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π
    public Optional<FiringSessionEntity> getSessionWithProgram(Long sessionId) {
        return firingSessionRepository.findWithProgramById(sessionId);
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    public List<TemperatureEntity> getAllTemperatureReadings(Long sessionId) {
        return firingSessionRepository.findTemperatureReadingsBySessionId(sessionId);
    }

    @Transactional(readOnly = true)
    public SessionDataResponseDTO getSessionDataDTO(Long sessionId) {
        FiringSessionEntity session = getSessionWithProgram(sessionId)
                .orElseThrow(() -> new RuntimeException("Session not found: " + sessionId));

        List<TemperatureEntity> allTemps = getAllTemperatureReadings(sessionId);
        // latestTemp –Ω–µ –Ω—É–∂–µ–Ω ‚Äî –º—ã –Ω–∞–π–¥—ë–º –µ–≥–æ —Å–∞–º–∏ –∏–∑ allTemps

        // 1. –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π DTO –æ—Ç MapStruct
        SessionDataResponseDTO baseDto = firingSessionMapper.toSessionDataDto(session, allTemps);

        // 2. –î–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
        Double maxTemp = firingSessionMapper.calculateMaxTemperature(allTemps);
        TemperatureResponseDTO latestTemp = firingSessionMapper.findLatestValidTemperature(allTemps);

        // 3. –°–æ–∑–¥–∞—ë–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π DTO (–µ—Å–ª–∏ record –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç ‚Äî —Å–æ–∑–¥–∞–π –±–∏–ª–¥–µ—Ä –∏–ª–∏ –∏–∑–º–µ–Ω—è–µ–º—ã–π –∫–ª–∞—Å—Å)
        return new SessionDataResponseDTO(
                baseDto.id(),
                baseDto.program(),
                baseDto.startTime(),
                baseDto.endTime(),
                baseDto.status(),
                baseDto.actualDurationMinutes(),
                maxTemp,
                baseDto.temperatureReadings(), // ‚Üê —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∏ –∑–∞–º–∞–ø–ª–µ–Ω–æ MapStruct
                latestTemp
        );
    }
    @Transactional(readOnly = true)
    public FiringProgramResponseDTO getProgramDataForSession(Long sessionId) {
        FiringProgramHistoryEntity program  = firingProgramHistoryRepository.findBySessionId(sessionId)
                .orElseThrow(() -> new ApiException(ApiErrorType.NOT_FOUND, "Session not found: " + sessionId));
        return firingProgramMapper.toResponseHistoryDTO(program);
    }


}