services:
  app:
    build:
      context: ..  # Контекст — корень проекта
      dockerfile: app/Dockerfile
    ports:
      - "9090:9090"
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}  # Из .env
      - APP_PORT=${APP_PORT}                     # Из .env
    env_file:
      - ./.env  # Загружаем .env в окружение
    networks:
      - bot-network
    depends_on:
      - database

  database:
    image: postgres
    ports:
      - "5001:5432"
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-personal-bot-hub:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # Подключение скрипта
    env_file:
      - ./.env  # Загружаем .env для NGROK_AUTHTOKEN
    networks:
      - bot-network

  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@gmail.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - database
    networks:
      - bot-network

  ngrok:
    image: ngrok/ngrok:latest
    restart: always
    command:
      - "start"
      - "app"
      - "--authtoken"
      - "${NGROK_AUTHTOKEN}"
      - "--config"
      - "/etc/ngrok.yml"
    volumes:
      - ./ngrok.yml:/etc/ngrok.yml
    env_file:
      - ./.env  # Загружаем .env для NGROK_AUTHTOKEN
    networks:
      - bot-network
  frontend:
    build:
      context: ../path-to-your-frontend-repo  # Укажите путь к репозиторию фронтенда
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:9090  # Пример переменной окружения для API
    networks:
      - bot-network
    depends_on:
      - app

  cloudflare-tunnel:
    image: cloudflare/cloudflared:latest
    container_name: cloudflare-tunnel
    command: tunnel --no-autoupdate run
    environment:
      - TUNNEL_TOKEN=<ваш_tunnel_token>  # Токен туннеля (см. шаг 2)
    volumes:
      - ./cloudflared:/etc/cloudflared  # Папка для хранения конфигурации
    networks:
      - bot-network
    restart: unless-stopped
volumes:
  postgres-personal-bot-hub:
    name: postgres-personal-bot-hub
    external: true

networks:
  bot-network:
    name: bot-network
    external: true